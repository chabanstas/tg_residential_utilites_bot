import telebot
import config
import sqlite3
from telebot import types
import texts
import db

bot = telebot.TeleBot(config.TOKEN)

db.create_tables()

@bot.message_handler(commands=['start'])
def start_handler(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    commands = [
        types.InlineKeyboardButton('üìù–ú–æ—ó –æ—Å–æ–±–æ–≤—ñ —Ä–∞—Ö—É–Ω–∫–∏', callback_data='my_bills'),
        types.InlineKeyboardButton('üìä–ü–µ—Ä–µ–¥–∞—Ç–∏ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞', callback_data='transfer_counter_readings'),
        types.InlineKeyboardButton('üí≥–°–ø–ª–∞—Ç–∏—Ç–∏', callback_data='pay'),
        types.InlineKeyboardButton('üìû–ó–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤—è–∑–æ–∫', callback_data='feedback'),
        types.InlineKeyboardButton('‚ùï–ö–æ—Ä–∏—Å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', callback_data='addition'),
        types.InlineKeyboardButton('‚ÑπÔ∏è –ü—Ä–æ –±–æ—Ç', callback_data='adout_bot')
    ]
    markup.add(*commands)
    bot.send_message(message.chat.id, "‚úã–í—ñ—Ç–∞—é! –¶–µ –Ñ–¥–∏–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–≤–∏–π —Ü–µ–Ω—Ç—Ä –ø–æ –∂–∏—Ç–ª–æ–≤–æ-–∫–æ–º—É–Ω–∞–ª—å–Ω–∏–º –ø–æ—Å–ª—É–≥–∞–º.\n‚¨áÔ∏è–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:", reply_markup=markup)
    
@bot.callback_query_handler(func=lambda call: True)
def handle_button_click(call):
    if call.data == 'my_bills':
        my_bills_handler(call.message)
    elif call.data == 'adout_bot':
        adout_bot_handler(call.message)
    elif call.data == 'to_main':
        start_handler(call.message)
    elif call.data == 'add_bill':
        add_bill_handler(call.message)
    elif call.data == 'delete_bill':
        delete_bill_handler(call.message)
    elif call.data.startswith('confirm_delete_'):
        confirm_delete_handler(call.message, call.data.split('_')[2])
    elif call.data.startswith('execute_delete_'):
        execute_delete_handler(call.message, call.data.split('_')[2])
    elif call.data.startswith('view_bill_'):
        view_bill_handler(call.message, call.data.split('_')[2])
    elif call.data == 'transfer_counter_readings':
        transfer_counter_readings_handler(call.message)
    elif call.data.startswith('zones_bill_'):
        select_zones_bill_handler(call.message, call.data.split('_')[2])
    elif call.data.startswith('zone1_'):
        zone1_handler(call.message, call.data.split('_')[1])
    elif call.data.startswith('zone2_'):
        zone2_handler(call.message, call.data.split('_')[1])
    elif call.data == 'pay':
        pay(call.message)
    elif call.data.startswith('pay_bill_'):
        pay_bill_handler(call.message, call.data.split('_')[2])
    elif call.data == 'feedback':
        feedback_handler(call.message)
    elif call.data == 'contacts':
        contacts_handler(call.message)
    elif call.data == 'message':
        message_user_handler(call.message)
    elif call.data == 'addition':
        addition_handler(call.message)
    elif call.data == 'tariffs':
        tariffs_handler(call.message)
    elif call.data == 'links':
        links_handler(call.message)
    elif call.data.startswith('pay_method_handler_'):
        pay_method_handler(call.message, call.data.split('_')[3])
    elif call.data.startswith('crypt_pay'):
        crypt_pay_handler(call.message)
    elif call.data.startswith('payment_systems_pay'):
        payment_systems_pay_handler(call.message)
    elif call.data.startswith('paid_'):
        paid_handler(call.message, call.data.split('_')[1])
    elif call.data.startswith('gas'):
        add_type_bill_handler(call.message, "–ì–∞–∑")
    elif call.data.startswith('gas_delivery'):
        add_type_bill_handler(call.message, "–î–æ—Å—Ç–∞–≤–∫–∞ –≥–∞–∑—É")
    elif call.data.startswith('electricity'):
        add_type_bill_handler(call.message, "–ï–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—è")
    elif call.data.startswith('water'):
        add_type_bill_handler(call.message, "–í–æ–¥–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è")
    elif call.data.startswith('drainage'):
        add_type_bill_handler(call.message, "–í–æ–¥–æ–≤—ñ–¥–≤–µ–¥–µ–Ω–Ω—è")
    elif call.data.startswith('hot_water'):
        add_type_bill_handler(call.message, "–ü–æ—Å—Ç–∞—á–∞–Ω–Ω—è –≥–∞—Ä—è—á–æ—ó –≤–æ–¥–∏")
    elif call.data.startswith('rubbish'):
        add_type_bill_handler(call.message, "–í–∏–≤—ñ–∑ —Å–º—ñ—Ç—Ç—è")
    elif call.data.startswith('internet'):
        add_type_bill_handler(call.message, "–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç")
    elif call.data.startswith('view_photo_handler_'):
        view_photo_handler(call.message, call.data.split('_')[3])
    

def adout_bot_handler(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    command = types.InlineKeyboardButton('üè†–ù–∞ –≥–æ–ª–æ–≤–Ω—É', callback_data='to_main')
    markup.add(command)
    bot.send_message(message.chat.id, texts.about_bot, reply_markup=markup)

def my_bills_handler(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    commands = [
        types.InlineKeyboardButton('‚ûï–î–æ–¥–∞—Ç–∏ –æ—Å–æ–±–æ–≤–∏–π —Ä–∞—Ö—É–Ω–æ–∫', callback_data='add_bill'),
        types.InlineKeyboardButton('üè†–ù–∞ –≥–æ–ª–æ–≤–Ω—É', callback_data='to_main')
    ]
    bills = get_bills()
    if len(bills) >= 2:
        commands.insert(0, types.InlineKeyboardButton("‚ûñ–í–∏–¥–∞–ª–∏—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫", callback_data='delete_bill'))
    for bill in bills:
        commands.insert(0, types.InlineKeyboardButton(bill, callback_data='view_bill_{}'.format(bill)))
        
    markup.add(*commands)   
    bot.send_message(message.chat.id, '‚¨áÔ∏è–û–±–µ—Ä—ñ—Ç—å –æ—Å–æ–±–æ–≤–∏–π —Ä–∞—Ö—É–Ω–æ–∫ –∞–±–æ –¥–æ–¥–∞–π—Ç–µ –Ω–æ–≤–∏–π:', reply_markup=markup)
    
def add_bill_handler(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    commands = [
        types.InlineKeyboardButton('üî•–ì–∞–∑', callback_data='gas'),
        types.InlineKeyboardButton('üî•–î–æ—Å—Ç–∞–≤–∫–∞ –≥–∞–∑—É', callback_data='gas_delivery'),
        types.InlineKeyboardButton('üí°–ï–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—è', callback_data='electricity'),
        types.InlineKeyboardButton('üíß–í–æ–¥–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è', callback_data='water'),
        types.InlineKeyboardButton('üíß–í–æ–¥–æ–≤—ñ–¥–≤–µ–¥–µ–Ω–Ω—è', callback_data='drainage'),
        types.InlineKeyboardButton('üå°Ô∏è–ü–æ—Å—Ç–∞—á–∞–Ω–Ω—è –≥–∞—Ä—è—á–æ—ó –≤–æ–¥–∏', callback_data='hot_water'),
        types.InlineKeyboardButton('üóëÔ∏è–í–∏–≤—ñ–∑ —Å–º—ñ—Ç—Ç—è', callback_data='rubbish'),
        types.InlineKeyboardButton('üåê–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç', callback_data='internet'),
        types.InlineKeyboardButton('üè†–ù–∞ –≥–æ–ª–æ–≤–Ω—É', callback_data='to_main')
        ]
    markup.add(*commands)
    bot.send_message(message.chat.id, "‚¨áÔ∏è–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–æ—Å–ª—É–≥–∏:", reply_markup=markup)

def add_type_bill_handler(message, service_type):
    markup = types.InlineKeyboardMarkup(row_width=1)
    command = types.InlineKeyboardButton('üè†–ù–∞ –≥–æ–ª–æ–≤–Ω—É', callback_data='to_main')
    markup.add(command)
    bot.send_message(message.chat.id, f"‚å®Ô∏è–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –í–∞—à–æ–≥–æ –æ—Å–æ–±–æ–≤–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É (–Ω–æ–º–µ—Ä —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑ 10 —Ü–∏—Ñ—Ä) –¥–ª—è {service_type}:", reply_markup=markup)
    bot.register_next_step_handler(message, lambda msg: process_add_bill(msg, service_type))

def process_add_bill(message, service_type):
    personal_account = message.text
    if check_valid_personal_account(message, personal_account):
        return
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('INSERT INTO bills (personal_account, type, new_zone1, new_zone2, old_zone1, old_zone2, paid) VALUES (?, ?, ?, ?, ?, ?, ?)', (personal_account, service_type, 0, 0, 0, 0, False))
    conn.commit()
    cursor.close()
    conn.close()
    bot.send_message(message.chat.id, "‚úÖ–û—Å–æ–±–æ–≤–∏–π —Ä–∞—Ö—É–Ω–æ–∫ –¥–æ–¥–∞–Ω–æ!")
    start_handler(message)
   
def delete_bill_handler(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    commands = [
        types.InlineKeyboardButton('üè†–ù–∞ –≥–æ–ª–æ–≤–Ω—É', callback_data='to_main')
    ]
    bills = get_bills()
    for bill in bills:
        commands.insert(0, types.InlineKeyboardButton(bill, callback_data='confirm_delete_{}'.format(bill)))

    markup.add(*commands)
    bot.send_message(message.chat.id, '‚¨áÔ∏è–û–±–µ—Ä—ñ—Ç—å —Ä–∞—Ö—É–Ω–æ–∫ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:', reply_markup=markup)

def confirm_delete_handler(message, bill):
    markup = types.InlineKeyboardMarkup(row_width=1)
    commands = [
        types.InlineKeyboardButton('‚úîÔ∏è–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è', callback_data='execute_delete_{}'.format(bill)),
        types.InlineKeyboardButton('‚úñÔ∏è–°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data='my_bills')
    ]
    markup.add(*commands)
    bot.send_message(message.chat.id, f"‚ÅâÔ∏è–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ –±–∞–∂–∞—î—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫ {bill}?", reply_markup=markup)
   
def execute_delete_handler(call, bill):
    delete_bill(bill)
    bot.send_message(call.chat.id, f"‚úÖ–†–∞—Ö—É–Ω–æ–∫ {bill} –±—É–≤ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∏–π.")
    my_bills_handler(call)

def delete_bill(bill):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('DELETE FROM bills WHERE personal_account = ?', (bill,))
    conn.commit()
    cursor.close()
    conn.close()
 
def get_bills():
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''SELECT personal_account FROM bills''')
    result = cursor.fetchall()
    conn.commit()
    cursor.close()
    conn.close()
    return [row[0] for row in result] 

def transfer_counter_readings_handler(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    commands = [
        types.InlineKeyboardButton('‚ûï–î–æ–¥–∞—Ç–∏ –æ—Å–æ–±–æ–≤–∏–π —Ä–∞—Ö—É–Ω–æ–∫', callback_data='add_bill'),
        types.InlineKeyboardButton('üè†–ù–∞ –≥–æ–ª–æ–≤–Ω—É', callback_data='to_main')
    ]
    bills = get_bills()
    if len(bills) >= 2:
        commands.insert(0, types.InlineKeyboardButton("‚ûñ–í–∏–¥–∞–ª–∏—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫", callback_data='delete_bill'))
    for bill in bills:
        commands.insert(0, types.InlineKeyboardButton(bill, callback_data='zones_bill_{}'.format(bill)))
    
    markup.add(*commands)   
    bot.send_message(message.chat.id, '‚¨áÔ∏è–û–±–µ—Ä—ñ—Ç—å –æ—Å–æ–±–æ–≤–∏–π —Ä–∞—Ö—É–Ω–æ–∫ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤:', reply_markup=markup)

def view_bill_handler(message, bill):
    address = get_address(bill)
    sum = calculate_payment_amount(bill)
    
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT new_zone1, new_zone2, old_zone1, old_zone2, type, paid FROM bills WHERE personal_account = ?', (bill,))
    result = cursor.fetchone()
    current_rate1 = result[0] if result else 0
    past_rate1 = result[2] if result else 0
    account_type = result[4]
    paid = result[5]
    cursor.close()
    conn.close()
    
    markup = types.InlineKeyboardMarkup(row_width=1)
    
    commands = [
        types.InlineKeyboardButton('üì∑–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ñ–æ—Ç–æ', callback_data='view_photo_handler_{}'.format(bill)),
        types.InlineKeyboardButton('üè†–ù–∞ –≥–æ–ª–æ–≤–Ω—É', callback_data='to_main')
    ]
    markup.add(*commands)
    if paid:
        text_paid = '‚úÖ–°–ø–ª–∞—á–µ–Ω–æ'
    else:
        text_paid = f'‚ùóÔ∏è–ü–æ—Ç—Ä—ñ–±–Ω–æ —Å–ø–ª–∞—Ç–∏—Ç–∏: {sum} –≥—Ä–Ω.'
    text = f"üìÑ–†–∞—Ö—É–Ω–æ–∫ {account_type} {bill} –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –∑–∞ –∞–¥—Ä–µ—Å–æ—é:\n\n{address}\nüîí–°—Ç–∞—Ç—É—Å:\n{text_paid}\n\nüî¢–†–∞—Ö—É–Ω–∫–æ–≤—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏:\nüîº–ü–æ—Ç–æ—á–Ω–∏–π = {current_rate1}\nüîΩ–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π = {past_rate1}"
    bot.send_message(message.chat.id, text, reply_markup=markup)
    
def select_zones_bill_handler(message, bill):
    markup = types.InlineKeyboardMarkup(row_width=1)
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT type FROM bills WHERE personal_account = ?', (bill,))
    result = cursor.fetchone()
    account_type = result[0] if result else None
    
    address = get_address(bill)
    
    if account_type == "–ì–∞–∑":
        commands  = [
        types.InlineKeyboardButton('üî•–õ—ñ—á–∏–ª—å–Ω–∏–∫ –≥–∞–∑–æ–≤–∏–π', callback_data='zone1_{}'.format(bill)),
        types.InlineKeyboardButton('üè†–ù–∞ –≥–æ–ª–æ–≤–Ω—É', callback_data='to_main')
    ]
    elif account_type == "–î–æ—Å—Ç–∞–≤–∫–∞ –≥–∞–∑—É":
        commands  = [
        types.InlineKeyboardButton('üî•–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–±—ñ—Ä: –î–æ—Å—Ç–∞–≤–∫–∞ –≥–∞–∑—É', callback_data='zone1_{}'.format(bill)),
        types.InlineKeyboardButton('üè†–ù–∞ –≥–æ–ª–æ–≤–Ω—É', callback_data='to_main')
    ]
    elif account_type == "–ï–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—è":
        commands  = [
        types.InlineKeyboardButton('1Ô∏è‚É£1 –∑–æ–Ω–∞', callback_data='zone1_{}'.format(bill)),
        types.InlineKeyboardButton('2Ô∏è‚É£2 –∑–æ–Ω–∏', callback_data='zone2_{}'.format(bill)),
        types.InlineKeyboardButton('üè†–ù–∞ –≥–æ–ª–æ–≤–Ω—É', callback_data='to_main')
    ]
    elif account_type == "–í–æ–¥–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è":
        commands  = [
        types.InlineKeyboardButton('üíß–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–±—ñ—Ä: –í–æ–¥–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è', callback_data='zone1_{}'.format(bill)),
        types.InlineKeyboardButton('üè†–ù–∞ –≥–æ–ª–æ–≤–Ω—É', callback_data='to_main')
    ]
    elif account_type == "–í–æ–¥–æ–≤—ñ–¥–≤–µ–¥–µ–Ω–Ω—è":
        commands  = [
        types.InlineKeyboardButton('üíß–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–±—ñ—Ä: –í–æ–¥–æ–≤—ñ–¥–≤–µ–¥–µ–Ω–Ω—è', callback_data='zone1_{}'.format(bill)),
        types.InlineKeyboardButton('üè†–ù–∞ –≥–æ–ª–æ–≤–Ω—É', callback_data='to_main')
    ]
    elif account_type == "–ü–æ—Å—Ç–∞—á–∞–Ω–Ω—è –≥–∞—Ä—è—á–æ—ó –≤–æ–¥–∏":
        commands  = [
        types.InlineKeyboardButton('üå°Ô∏è–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–±—ñ—Ä: –ü–æ—Å—Ç–∞—á–∞–Ω–Ω—è –≥–∞—Ä—è—á–æ—ó –≤–æ–¥–∏', callback_data='zone1_{}'.format(bill)),
        types.InlineKeyboardButton('üè†–ù–∞ –≥–æ–ª–æ–≤–Ω—É', callback_data='to_main')
    ]
    elif account_type == "–í–∏–≤—ñ–∑ —Å–º—ñ—Ç—Ç—è":
        commands  = [
        types.InlineKeyboardButton('üóëÔ∏è–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–±—ñ—Ä: –í–∏–≤—ñ–∑ —Å–º—ñ—Ç—Ç—è', callback_data='zone1_{}'.format(bill)),
        types.InlineKeyboardButton('üè†–ù–∞ –≥–æ–ª–æ–≤–Ω—É', callback_data='to_main')
    ]
    elif account_type == "–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç":
        commands  = [
        types.InlineKeyboardButton('üåê–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–±—ñ—Ä: –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç', callback_data='zone1_{}'.format(bill)),
        types.InlineKeyboardButton('üè†–ù–∞ –≥–æ–ª–æ–≤–Ω—É', callback_data='to_main')
    ]
    markup.add(*commands)
    texts = [f"üìÑ–†–∞—Ö—É–Ω–æ–∫ {bill}\n–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –∑–∞ –∞–¥—Ä–µ—Å–æ—é:\n\n{address}", "‚¨áÔ∏è–û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç:"]
    bot.send_message(message.chat.id, texts[0])
    bot.send_message(message.chat.id, texts[1], reply_markup=markup)

def get_address(bill):
    db.generate_test_data(1, bill)
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()

    cursor.execute('SELECT * FROM addresses WHERE personal_account = ?', (bill,))
    rows = cursor.fetchall()

    response = ""
    for row in rows:
        response += f"üìç–ú—ñ—Å—Ç–æ: {row[2]}, –≤—É–ª–∏—Ü—è: {row[3]}, –±—É–¥–∏–Ω–æ–∫: {row[4]}, –ø—ñ–¥—ó–∑–¥: {row[5]}, –∫–≤–∞—Ä—Ç–∏—Ä–∞: {row[6]}\n"

    cursor.close()
    conn.close()

    return response   
 
def zone1_handler(message, bill):
    bot.send_message(message.chat.id, "‚å®Ô∏è–í–≤–µ–¥—ñ—Ç—å –ø–æ–∫–∞–∑–∞–Ω–Ω—è (–≤—Å—ñ —Ü–∏—Ñ—Ä–∏ –¥–æ –∫–æ–º–∏):")
    bot.register_next_step_handler(message, process_zone1_handler, bill)

def process_zone1_handler(message, bill):
    zone1 = message.text
    if not check_input_validity(zone1):
        bot.send_message(message.chat.id, "‚ùå–í–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ª–∏—à–µ —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")
        start_handler(message)
        return
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT new_zone1, old_zone1 FROM bills WHERE personal_account = ?', (bill,))
    result = cursor.fetchone()
    current_zone1 = result[0] if result else 0
    old_zone1 = result[1] if result else 0
    
    if current_zone1 != 0:
        cursor.execute('UPDATE bills SET old_zone1 = ?, paid = ? WHERE personal_account = ?', (current_zone1, False, bill))
    
    if current_zone1 < old_zone1:
        bot.send_message(message.chat.id, "‚ùå–ó–Ω–∞—á–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–æ–∫–∞–∑–Ω–∏–∫–∞ (1 –∑–æ–Ω–∞) –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –º–µ–Ω—à–∏–º –∑–∞ –ø–æ—Ç–æ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")
        start_handler(message)
        return
   
    cursor.execute('UPDATE bills SET new_zone1 = ?, paid = ? WHERE personal_account = ?', (zone1, False, bill))
    conn.commit()
    cursor.close()
    conn.close()

    bot.send_message(message.chat.id, "‚úÖ–ü–æ–∫–∞–∑–Ω–∏–∫ –¥–æ–¥–∞–Ω–æ!\nüì∑–¢–µ–ø–µ—Ä —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—É–π—Ç–µ –ª—ñ—á–∏–ª—å–Ω–∏–∫, —â–æ–± –±—É–ª–æ –≤–∏–¥–Ω–æ —Ü–∏—Ñ—Ä–∏ –¥–æ –∫–æ–º–∏:")
    bot.register_next_step_handler(message, photo_handler, bill)
 
def photo_handler(message, bill):
    photo = message.photo[-1]
    file_id = photo.file_id

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        types.KeyboardButton('‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é'),
        types.KeyboardButton('‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏')
        ]
    markup.add(*buttons)
    bot.send_message(message.chat.id, "–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å, —â–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—è –±—É–ª–∞ –∑—Ä–æ–±–ª–µ–Ω–∞ –Ω–∞–ª–µ–∂–Ω–∏–º —á–∏–Ω–æ–º —Ç–∞ –Ω–µ –±—É–ª–æ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –≥—Ä–∞—Ñ—ñ—á–Ω–∏—Ö —Ä–µ–¥–∞–∫—Ç–æ—Ä—ñ–≤:", reply_markup=markup)
    bot.register_next_step_handler(message, lambda msg: save_photo(msg, bill, file_id))

def save_photo(message, bill, file_id):
    personal_account = message.text

    if personal_account == '‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏':
        bot.send_message(message.chat.id, "‚ùå –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        start_handler(message)
        return

    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('INSERT INTO photos (personal_account, file_id) VALUES (?, ?)', (bill, file_id))
    conn.commit()
    cursor.close()
    conn.close()

    bot.send_message(message.chat.id, "‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
    start_handler(message)

def view_photo_handler(message, bill):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT file_id FROM photos WHERE personal_account = ?', (bill,))
    result = cursor.fetchone()
    if result:
        file_id = result[0]
        bot.send_photo(message.chat.id, file_id)
    else:
        bot.send_message(message.chat.id, "–§–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—è –¥–ª—è –¥–∞–Ω–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
    cursor.close()
    conn.close()
   
def zone2_handler(message, bill):
    bot.send_message(message.chat.id, f"2Ô∏è‚É£–í–∏ –≤–∏–±—Ä–∞–ª–∏ –∑–æ–Ω–Ω—ñ—Å—Ç—å —Å–≤–æ–≥–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫—É: 2 –∑–æ–Ω–∏")
    bot.send_message(message.chat.id, "‚å®Ô∏è–í–≤–µ–¥—ñ—Ç—å –ø–æ–∫–∞–∑–∞–Ω–Ω—è: ‚òÄÔ∏è–î–ï–ù–¨ –ø—Ä–æ–±—ñ–ª üåô–ù–Ü–ß (–≤—Å—ñ —Ü–∏—Ñ—Ä–∏ –¥–æ –∫–æ–º–∏).")
    bot.register_next_step_handler(message, process_zone2_handler, bill)

def process_zone2_handler(message, bill):
    text = message.text
    words = text.split()
    for word in words:
        if not check_input_validity(word):
            bot.send_message(message.chat.id, "‚ùå–í–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ª–∏—à–µ —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")
            start_handler(message)
            return
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT new_zone1, new_zone2, old_zone1, old_zone2 FROM bills WHERE personal_account = ?', (bill,))
    result = cursor.fetchone()
    current_zone1 = result[0] if result else 0
    current_zone2 = result[1] if result else 0
    old_zone1 = result[2] if result else 0
    old_zone2 = result[3] if result else 0
    
    if current_zone1 != 0:
        cursor.execute('UPDATE bills SET old_zone1 = ?, paid = ? WHERE personal_account = ?', (current_zone1, False, bill))
    
    if current_zone2 != 0:
        cursor.execute('UPDATE bills SET old_zone2 = ?, paid = ? WHERE personal_account = ?', (current_zone2, False, bill))
    
    if current_zone1 < old_zone1:
        bot.send_message(message.chat.id, "‚ùå–ó–Ω–∞—á–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–æ–∫–∞–∑–Ω–∏–∫–∞ (1 –∑–æ–Ω–∞) –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –±—ñ–ª—å—à–∏–º –∑–∞ –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")
        start_handler(message)
        return
    
    if current_zone2 < old_zone2:
        bot.send_message(message.chat.id, "‚ùå–ó–Ω–∞—á–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–æ–∫–∞–∑–Ω–∏–∫–∞ (2 –∑–æ–Ω–∞) –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –±—ñ–ª—å—à–∏–º –∑–∞ –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")
        start_handler(message)
        return
    
    cursor.execute('UPDATE bills SET new_zone1 = ?, paid = ? WHERE personal_account = ?', (words[0], False, bill))
    cursor.execute('UPDATE bills SET new_zone2 = ?, paid = ? WHERE personal_account = ?', (words[1], False, bill))
    conn.commit()
    cursor.close()
    conn.close()

    bot.send_message(message.chat.id, "‚úÖ–ü–æ–∫–∞–∑–Ω–∏–∫ (2 –∑–æ–Ω–∏) –¥–æ–¥–∞–Ω–æ!")
    start_handler(message)
 
def check_input_validity(text):
    if not text.isdigit():
        return False
    return True   

def pay(message): 
    markup = types.InlineKeyboardMarkup(row_width=1)
    commands = [
        types.InlineKeyboardButton('‚ûï–î–æ–¥–∞—Ç–∏ –æ—Å–æ–±–æ–≤–∏–π —Ä–∞—Ö—É–Ω–æ–∫', callback_data='add_bill'),
        types.InlineKeyboardButton('üè†–ù–∞ –≥–æ–ª–æ–≤–Ω—É', callback_data='to_main')
    ]
    bills = get_bills()
    if len(bills) >= 2:
        commands.insert(0, types.InlineKeyboardButton("‚ûñ–í–∏–¥–∞–ª–∏—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫", callback_data='delete_bill'))
    for bill in bills:
        commands.insert(0, types.InlineKeyboardButton(bill, callback_data='pay_bill_{}'.format(bill)))
    
    markup.add(*commands)   
    bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å –æ—Å–æ–±–æ–≤–∏–π —Ä–∞—Ö—É–Ω–æ–∫ –¥–ª—è —Å–ø–ª–∞—Ç–∏:', reply_markup=markup)   
      
def pay_bill_handler(message, bill):
    address = get_address(bill)
    sum = calculate_payment_amount(bill)
    markup = types.InlineKeyboardMarkup(row_width=1)
    commands = [
        types.InlineKeyboardButton(f'üí∞–°–ø–ª–∞—Ç–∏—Ç–∏ {sum}', callback_data='pay_method_handler_{}'.format(bill)),
        types.InlineKeyboardButton('üè†–ù–∞ –≥–æ–ª–æ–≤–Ω—É', callback_data='to_main')
    ]
    markup.add(*commands)

    bot.send_message(message.chat.id,  f"üìÑ–†–∞—Ö—É–Ω–æ–∫ {bill} –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –∑–∞ –∞–¥—Ä–µ—Å–æ—é:\n\n{address}", reply_markup=markup)
 
def pay_method_handler(message, bill):
    markup = types.InlineKeyboardMarkup(row_width=1)
    commands = [
        types.InlineKeyboardButton(f'üí≥–ö–∞—Ä—Ç–∫–æ–≤–∞ –æ–ø–ª–∞—Ç–∞', url="https://buy.stripe.com/test_3cs6ru3zwfbvgKcbII"),
        types.InlineKeyboardButton(f'üí∞–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –ø–ª–∞—Ç—ñ–∂–Ω—ñ —Å–∏—Å—Ç–µ–º–∏', callback_data='payment_systems_pay'),
        types.InlineKeyboardButton(f'üåê–û–ø–ª–∞—Ç–∞ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç', callback_data='crypt_pay'),
        types.InlineKeyboardButton(f'‚úÖ–ü–æ–∑–Ω–∞—á–∏—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫ {bill} —Å–ø–ª–∞—á–µ–Ω–∏–º', callback_data='paid_{}'.format(bill)),
        types.InlineKeyboardButton('üè†–ù–∞ –≥–æ–ª–æ–≤–Ω—É', callback_data='to_main')
    ]
    markup.add(*commands)
    
    bot.send_message(message.chat.id, "‚¨áÔ∏è–í–∏–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:", reply_markup=markup)
    
def calculate_payment_amount(bill):
    gas_rate = 7.96
    gas_delivery_rate = 1.79
    wather_rate = 8.94
    drainage_rate = 3.06
    day_rate = 1.44
    more_day_rate = 1.68
    night_rate = day_rate/2
    hot_wather = 69.62
    garbage_removal_rate = 36.11
    internet_rate = 90
    sum = 0
    
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT new_zone1, new_zone2, old_zone1, old_zone2, type FROM bills WHERE personal_account = ?', (bill,))
    result = cursor.fetchone()
    current_rate1 = result[0] if result else 0
    past_rate1 = result[1] if result else 0
    current_rate2 = result[2] if result else 0
    past_rate2 = result[3] if result else 0
    account_type = result[4]
    cursor.close()
    conn.close()
    
    if account_type == "–ì–∞–∑":
        if (current_rate1 == 0 and current_rate2 == 0) or current_rate2 == 0:
            sum = 10 * gas_rate
        else:
            sum = (current_rate1 - current_rate2) * gas_rate      
    elif account_type == "–î–æ—Å—Ç–∞–≤–∫–∞ –≥–∞–∑—É":
        sum = 10 * gas_delivery_rate
    elif account_type == "–ï–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—è":
        if current_rate1 and current_rate2 == 0 and current_rate1 == 0:
            day_amount = 0
        elif current_rate2 == 0:
            day_amount = 160 * 1.44
        else:
            day_amount = (current_rate1 - current_rate2)
            if day_amount > 250:
                day_amount = day_amount * more_day_rate
            else:
                day_amount = day_amount * day_rate
        
        if past_rate1 and past_rate2 == 0 and past_rate1 == 0:
            night_amount = 0
        elif past_rate1 != 0 and past_rate2 == 0:
            night_amount = 80 * 0.72
        else:
            night_amount = (past_rate1 - past_rate2) * night_rate
        sum = day_amount + night_amount
    elif account_type == "–í–æ–¥–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è":
        if (current_rate1 == 0 and current_rate2 == 0) or current_rate1 != 0:
            sum = 10 * wather_rate
        else:
            sum = (current_rate1 - current_rate2) * wather_rate 
    elif account_type == "–í–æ–¥–æ–≤—ñ–¥–≤–µ–¥–µ–Ω–Ω—è":
        sum = 10 * drainage_rate
    elif account_type == "–ü–æ—Å—Ç–∞—á–∞–Ω–Ω—è –≥–∞—Ä—è—á–æ—ó –≤–æ–¥–∏":
        if (current_rate1 == 0 and current_rate2 == 0) or current_rate1 != 0:
            sum = 10 * hot_wather
        else:
            sum = (current_rate1 - current_rate2) * hot_wather
    elif account_type == "–í–∏–≤—ñ–∑ —Å–º—ñ—Ç—Ç—è":
        sum = 1 * garbage_removal_rate
    elif account_type == "–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç":
        sum = 1 * internet_rate
    else:
        sum = -1
       
    sum = round(sum, 2)
    
    return sum
 
def feedback_handler(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    commands = [
        types.InlineKeyboardButton('‚ûñ–ù–∞–ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è', callback_data='message'),
        types.InlineKeyboardButton('üìû–ö–æ–Ω—Ç–∞–∫—Ç–∏', callback_data='contacts'),
        types.InlineKeyboardButton('üè†–ù–∞ –≥–æ–ª–æ–≤–Ω—É', callback_data='to_main')
    ]
    markup.add(*commands)
    bot.send_message(message.chat.id, "–í—ñ—Ç–∞—é! –¶–µ –Ñ–¥–∏–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–≤–∏–π —Ü–µ–Ω—Ç—Ä –ø–æ –∂–∏—Ç–ª–æ–≤–æ-–∫–æ–º—É–Ω–∞–ª—å–Ω–∏–º –ø–æ—Å–ª—É–≥–∞–º. –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:", reply_markup=markup)

def contacts_handler(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    command = types.InlineKeyboardButton('üè†–ù–∞ –≥–æ–ª–æ–≤–Ω—É', callback_data='to_main')
    markup.add(command)
    email = "test"
    phone = "test"
    bot.send_message(message.chat.id, f"‚ÜîÔ∏è –ó–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤'—è–∑–æ–∫:\n\nüìß –ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞: {email}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}", reply_markup=markup)

def message_user_handler(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    command = types.InlineKeyboardButton('üè†–ù–∞ –≥–æ–ª–æ–≤–Ω—É', callback_data='to_main')
    markup.add(command)
    bot.send_message(message.chat.id, "‚ûñ–ù–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", reply_markup=markup)
    bot.register_next_step_handler(message, process_message_user_handler)
    
def process_message_user_handler(message):
    bot.send_message(message.chat.id, "‚úÖ–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!")
    start_handler(message)

def addition_handler(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    commands = [
        types.InlineKeyboardButton(f'üí∞–¢–∞—Ä–∏—Ñ–∏', callback_data='tariffs'),
        types.InlineKeyboardButton(f'üîó–ü–æ—Å–∏–ª–∞–Ω–Ω—è, —è–∫—ñ –≤–∞—Ä—Ç–æ –≤—ñ–¥–≤—ñ–¥–∞—Ç–∏', callback_data='links'),
        types.InlineKeyboardButton('üè†–ù–∞ –≥–æ–ª–æ–≤–Ω—É', callback_data='to_main')
    ]
    markup.add(*commands)
    
    bot.send_message(message.chat.id, 'üìã–û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó:', reply_markup=markup)

def tariffs_handler(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    commands = [
        types.InlineKeyboardButton('üè†–ù–∞ –≥–æ–ª–æ–≤–Ω—É', callback_data='to_main')
    ]
    markup.add(*commands)
    tariffs = [
        "üî•–ì–∞–∑ —ñ —Ä–æ–∑–ø–æ–¥—ñ–ª (–¥–æ—Å—Ç–∞–≤–∫–∞) –≥–∞–∑—É:\nüîπ 7,96 –≥—Ä–Ω. (–∑ –ü–î–í) –∑–∞ 1 –º¬≥\nüîπ 1,79 –≥—Ä–Ω. –∑–∞ 1 –º¬≥\n\n",
        "üí°–ï–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—è:\nüîπ –¥–æ 250 –∫–í—Ç‚ãÖ–≥–æ–¥ (–≤–∫–ª—é—á–Ω–æ) - 1,44 –≥—Ä–Ω. (–∑ –ü–î–í) –∑–∞ 1 –∫–í—Ç‚ãÖ–≥–æ–¥\nüîπ –ø–æ–Ω–∞–¥ 250 –∫–í—Ç‚ãÖ–≥–æ–¥ ‚Äî 1,68 –≥—Ä–Ω. (–∑ –ü–î–í) –∑–∞ 1 –∫–í—Ç‚ãÖ–≥–æ–¥\n\n",
        "üíß–í–æ–¥–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è —Ç–∞ –≤–æ–¥–æ–≤—ñ–¥–≤–µ–¥–µ–Ω–Ω—è:\nüîπ –≤—ñ–¥ 8,94 –¥–æ 39,42 –≥—Ä–Ω. –∑–∞ 1 –º¬≥, –∑ –ü–î–í\nüîπ –≤—ñ–¥ 3,06 –¥–æ 40,51 –≥—Ä–Ω. –∑–∞ 1 –º¬≥, –∑ –ü–î–í",
        "üå°Ô∏è–ü–æ—Å—Ç–∞—á–∞–Ω–Ω—è –≥–∞—Ä—è—á–æ—ó –≤–æ–¥–∏:\nüîπ –≤—ñ–¥ 69,62 –¥–æ 110,05 –≥—Ä–Ω. –∑–∞ 1 –º¬≥, –∑ –ü–î–í",
        "üóëÔ∏è–í–∏–≤—ñ–∑ —Å–º—ñ—Ç—Ç—è\nüîπ 36,11 –≥—Ä–Ω",
        "üåê–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç:\nüîπ –≤—ñ–¥ 90 –¥–æ 1000 –≥—Ä–Ω/–º—ñ—Å"
    ]
    for tariff in tariffs:
        bot.send_message(message.chat.id, tariff)
    bot.send_message(message.chat.id, '‚¨áÔ∏è–û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó:', reply_markup=markup)

def links_handler(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    commands = [
        types.InlineKeyboardButton(text="üîπ–ü—Ä–∞–≤–∞ —Å–ø–æ–∂–∏–≤–∞—á—ñ–≤ –∂–∏—Ç–ª–æ–≤–æ-–∫–æ–º—É–Ω–∞–ª—å–Ω–∏—Ö –ø–æ—Å–ª—É–≥ —Ç–∞ —ó—Ö –∑–∞—Ö–∏—Å—Ç", url="https://wiki.legalaid.gov.ua/index.php/%D0%9F%D1%80%D0%B0%D0%B2%D0%B0_%D1%81%D0%BF%D0%BE%D0%B6%D0%B8%D0%B2%D0%B0%D1%87%D1%96%D0%B2_%D0%B6%D0%B8%D1%82%D0%BB%D0%BE%D0%B2%D0%BE-%D0%BA%D0%BE%D0%BC%D1%83%D0%BD%D0%B0%D0%BB%D1%8C%D0%BD%D0%B8%D1%85_%D0%BF%D0%BE%D1%81%D0%BB%D1%83%D0%B3_%D1%82%D0%B0_%D1%97%D1%85_%D0%B7%D0%B0%D1%85%D0%B8%D1%81%D1%82"),
        types.InlineKeyboardButton(text="üîπ–ö–æ–º—É–Ω–∞–ª—å–Ω—ñ —Ç–∞—Ä–∏—Ñ–∏", url="https://index.minfin.com.ua/ua/tariff/"),
        types.InlineKeyboardButton(text="üîπ–Ø–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–¥–∞—Ç–∏ –ø–æ–∫–∞–∑–Ω–∏–∫ –≥–∞–∑–æ–≤–æ–≥–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞", url="https://zaxid.net/yak_pravilno_podati_pokaznik_gazovogo_lichilnika_i_navishho_tse_robiti_n1551437"),
        types.InlineKeyboardButton(text="üîπ–Ø–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–¥–∞—Ç–∏ –ø–æ–∫–∞–∑–Ω–∏–∫ –µ–ª–µ–∫—Ç—Ä–æ–ª—ñ—á–∏–ª—å–Ω–∏–∫–∞", url="https://loe.lviv.ua/ua/pokaz_pobut"),
        types.InlineKeyboardButton(text="üîπ–¶–ï–ù–¢–† –ö–û–ú–£–ù–ê–õ–¨–ù–û–ì–û –°–ï–†–í–Ü–°–£", url="https://cks.com.ua/"),
        types.InlineKeyboardButton('üè†–ù–∞ –≥–æ–ª–æ–≤–Ω—É', callback_data='to_main')
    ]
    markup.add(*commands)
    bot.send_message(message.chat.id, "üîó–ü–æ—Å–∏–ª–∞–Ω–Ω—è, —è–∫—ñ –≤–∞—Ä—Ç–æ –≤—ñ–¥–≤—ñ–¥–∞—Ç–∏:", reply_markup=markup)

def crypt_pay_handler(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    command = types.InlineKeyboardButton('‚¨ÖÔ∏è–ú–µ—Ç–æ–¥–∏ –æ–ø–ª–∞—Ç–∏', callback_data='pay_method_handler_')
    markup.add(command)
    bot.send_message(message.chat.id, "‚≠ïÔ∏è–ü–µ—Ä–µ–ø—Ä–æ—à—É—é, –¥–∞–Ω–∏–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.\n\nüë®‚Äçüíª–ù–∞—à—ñ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∏ –≤–∂–µ –ø—Ä–∞—Ü—é—é—Ç—å –Ω–∞–¥ –ø—Ä–æ–±–ª–µ–º–æ—é.\n\n‚¨áÔ∏è–û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é:", reply_markup=markup)

def payment_systems_pay_handler(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    command = types.InlineKeyboardButton('‚¨ÖÔ∏è–ú–µ—Ç–æ–¥–∏ –æ–ø–ª–∞—Ç–∏', callback_data='pay_method_handler_')
    markup.add(command)
    bot.send_message(message.chat.id, "‚≠ïÔ∏è–£–ø—Å.. –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞.\n\nüë®‚Äçüíª–ù–∞—à—ñ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∏ –≤–∂–µ –ø—Ä–∞—Ü—é—é—Ç—å –Ω–∞–¥ –ø—Ä–æ–±–ª–µ–º–æ—é.\n\n‚¨áÔ∏è–û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é:", reply_markup=markup)

def paid_handler(message, bill):
    address = get_address(bill)
    markup = types.InlineKeyboardMarkup(row_width=1)
    commands = [
        types.InlineKeyboardButton('üìû–ó–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤—è–∑–æ–∫', callback_data='feedback'),
        types.InlineKeyboardButton('üè†–ù–∞ –≥–æ–ª–æ–≤–Ω—É', callback_data='to_main')
    ]
    markup.add(*commands)
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE bills SET paid = ? WHERE personal_account = ?', (True, bill))
    conn.commit()
    cursor.close()
    conn.close()
    bot.send_message(message.chat.id, f"üìÑ–†–∞—Ö—É–Ω–æ–∫ {bill} –±—É–ª–æ —Å–ø–ª–∞—á–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!‚úÖ\n\n–ó–∞ –∞–¥—Ä–µ—Å–æ—é:\n{address} –ø—Ä–∏–π–¥–µ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—è –ø—Ä–æ –æ–ø–ª–∞—Ç—É.\n\n–ó–∞–ª–∏—à–∏–ª–∏—Å—å –ø–∏—Ç–∞–Ω–Ω—è - –Ω–∞–ø–∏—à—ñ—Ç—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –∞–±–æ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ –∑–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º‚¨áÔ∏è", reply_markup=markup)

def check_valid_personal_account(message, personal_account):
    if not check_input_validity(personal_account) or len(personal_account) != 10:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ª–∏—à–µ —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–æ–≤–∂–∏–Ω–æ—é 10 —Å–∏–º–≤–æ–ª—ñ–≤.")
        start_handler(message)
        return True
  
@bot.message_handler(commands=['cdb'])
def view_all_users(message):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM bills')
    rows = cursor.fetchall()

    if len(rows) == 0:
        bot.send_message(message.chat.id, "–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø–æ—Ä–æ–∂–Ω—è.")
    else:
        response = "–£—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:\n"
        for row in rows:
            response += f"ID: {row[0]}, –æ/—Ä: {row[1]}, —Ç–∏–ø: {row[2]}, new zone1: {row[3]}, new zone2: {row[4]}, old zone1: {row[5]}, old zone2: {row[6]}, paid:{row[7]}\n"
        bot.send_message(message.chat.id, response)

    cursor.close()
    conn.close()
@bot.message_handler(commands=['cdb1'])
def get_all_addresses(message):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM addresses')
    rows = cursor.fetchall()
    if len(rows) == 0:
        bot.send_message(message.chat.id, "–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø–æ—Ä–æ–∂–Ω—è.")
    else:
        response = "–£—Å—ñ –∞–¥—Ä–µ—Å–∏:\n"
        for row in rows:
            response += f"ID: {row[0]}, –æ/—Ä: {row[1]}, –º—ñ—Å—Ç–æ: {row[2]}, –≤—É–ª–∏—Ü—è: {row[3]}, –±—É–¥–∏–Ω–æ–∫: {row[4]}, –ø—ñ–¥—ó–∑–¥: {row[5]}, –∫–≤–∞—Ä—Ç–∏—Ä–∞: {row[6]}\n"
        bot.send_message(message.chat.id, response)
    cursor.close()
    conn.close()
        
bot.polling(none_stop=True)